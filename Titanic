import pandas as pd
import numpy as np
import matplotlib as plt
#读取数据和查看数据
test = pd.read_csv(r"C:\Users\lizhenghong\Desktop\titanic\test.csv")
train = pd.read_csv(r"C:\Users\lizhenghong\Desktop\titanic\train.csv")
gender = pd.read_csv(r"C:\Users\lizhenghong\Desktop\titanic\gender_submission.csv")

print('test数据集共有 {} 行， {} 列。'.format(test.shape[0], test.shape[1]))
print('train数据集共有 {} 行， {} 列。'.format(train.shape[0], train.shape[1]))
print('gender数据集共有 {} 行， {} 列。'.format(gender.shape[0], gender.shape[1]))

full = pd.concat([train, test], axis = 0, ignore_index= True)
print('joint data:',full.shape)

print(full.isnull().sum())

#数据处理
full['Age'] = full['Age'].fillna(full['Age'].mean())#均值填充
full['Fare'] = full['Fare'].fillna(full['Fare'].mean())

full['Embarked'].value_counts()
full['Embarked'] = full['Embarked'].fillna('S')#最常出现值填充
full['Cabin'] = full['Cabin'].fillna('U')

full['Sex'] = full['Sex'].replace({'male':1,'female':0})#01替换
#转独热编码
embarkedDf = pd.DataFrame()
embarkedDf = pd.get_dummies(full['Embarked'],prefix='Embarked')
full = pd.concat([full,embarkedDf],axis=1)
full.drop('Embarked',axis=1,inplace=True)

pclassDf = pd.DataFrame()
pclassDf = pd.get_dummies(full['Pclass'], prefix='Pclass')
full = pd.concat([full,pclassDf],axis = 1)
full.drop('Pclass',axis = 1)
#名字提取头衔
def getTitle(name):
    str1 = name.split(',')[1]
    str2 = str1.split('.')[0]
    str3 = str2.strip()
    return str3

titleDf = pd.DataFrame()
titleDf = full['Name'].map(getTitle)

title_mapDict = {
                    "Capt":       "Officer",
                    "Col":        "Officer",
                    "Major":      "Officer",
                    "Jonkheer":   "Royalty",
                    "Don":        "Royalty",
                    "Sir" :       "Royalty",
                    "Dr":         "Officer",
                    "Rev":        "Officer",
                    "the Countess":"Royalty",
                    "Dona":       "Royalty",
                    "Mme":        "Mrs",
                    "Mlle":       "Miss",
                    "Ms":         "Mrs",
                    "Mr" :        "Mr",
                    "Mrs" :       "Mrs",
                    "Miss" :      "Miss",
                    "Master" :    "Master",
                    "Lady" :      "Royalty"
                    }
titleDf = titleDf.map(title_mapDict)

titleDf = pd.get_dummies(titleDf)
full = pd.concat([full,titleDf],axis = 1)
full.drop('Name',axis = 1,inplace=True)

cabinDf = pd.DataFrame()
full[ 'Cabin' ] = full[ 'Cabin' ].map( lambda c : c[0] )#客舱号的首字母代替
cabinDf = pd.get_dummies( full['Cabin'] , prefix = 'Cabin' )
full = pd.concat([full,cabinDf],axis=1)
full.drop('Cabin',axis=1,inplace=True)
#家庭大小
familyDf = pd.DataFrame()
familyDf['FamilySize'] = full['Parch'] + full['SibSp'] +1
familyDf['Family_Single'] = familyDf['FamilySize'].map(lambda s : 1 if s==1 else 0)
familyDf['Family_Small'] = familyDf['FamilySize'].map(lambda s : 1 if 2<=s <=4 else 0)
familyDf[ 'Family_Large' ]  = familyDf[ 'FamilySize' ].map( lambda s : 1 if 5 <= s else 0 )
full = pd.concat([full,familyDf],axis=1)
full.drop('FamilySize',axis=1,inplace=True)
full.drop('Ticket',axis=1,inplace=True)

#显示变量相关性
corrDf = full.corr()
corrDf['Survived'].sort_values(ascending =False)

#训练数据选取
full_X = pd.concat( [titleDf,#头衔
                     familyDf,#家庭大小
                     pclassDf,#舱级
                     embarkedDf,#登船点
                     full['Fare'],#船票价格
                     full['Sex'],#性别
                     cabinDf,#船舱号
                    ] , axis=1 )

source_X = full_X.loc[0:890]
source_Y = full['Survived'].loc[0:890]

pre_x = full_X.loc[891:]

size=np.arange(0.6,0.9,0.01)
scorelist=[[],[],[],[]]
#支持向量机Support Vector Machines
for i in range(0,31):
    from sklearn.model_selection import train_test_split
    train_X, test_X, train_Y, test_Y = train_test_split(source_X, source_Y, train_size=size[i], random_state=5)
    train_Y = train_Y.fillna(train_Y.mean())
    from sklearn.preprocessing import LabelEncoder
    train_Y = LabelEncoder().fit_transform(train_Y)

    from sklearn.svm import SVC
    model = SVC()
    model.fit( train_X , train_Y )
    scorelist[0].append(model.score(test_X , test_Y ))

    from sklearn.neighbors import KNeighborsClassifier
    model = KNeighborsClassifier(n_neighbors = 3)
    model.fit( train_X , train_Y )
    scorelist[1].append(model.score(test_X , test_Y ))

    from sklearn.linear_model import LogisticRegression
    model = LogisticRegression(max_iter=1000)
    model.fit(train_X, train_Y)
    scorelist[2].append(model.score(test_X , test_Y ))

    from sklearn.ensemble import RandomForestClassifier
    model = RandomForestClassifier(n_estimators=66)
    model.fit( train_X , train_Y )
    scorelist[3].append(model.score(test_X , test_Y ))

color_list = ('red', 'blue', 'lightgreen','green')
for i in range(0,4):
    plt.plot(size,scorelist[i],color=color_list[i])
plt.legend(['svm', 'KNN','lregression','forest'])

plt.xlabel('trainrate')
plt.ylabel('score')
plt.title('models')
plt.show()

#选出最好的模型来预测并保存结果
model = LogisticRegression(max_iter=1000)
train_X, test_X, train_Y, test_Y = train_test_split(source_X, source_Y, train_size=0.77, random_state=5)
model.fit(train_X, train_Y)
pred_Y = model.predict(pre_x)

# dataframe with predictions
kaggle = pd.DataFrame({'PassengerId': test['PassengerId'], 'Survived': pred_Y})
# save to csv
kaggle.to_csv('submission.csv', index=False)
print("Submitted successfully")
